package tool.db.sql.dialect;

import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import tool.db.sql.Dialect;

/**
 * QueryExpression for Oracle 7/8.
 *
 * As of release 8.1.6, Oracle supports limiting the number of rows returned by a query
 * through the use of the following mechanism.
 * 
 * SELECT *
 * FROM (
 *    SELECT empno, ename, job, sal,
 *        rank() over (order by sal) rnk
 *        FROM emp
 *  )
 *  WHERE rnk BETWEEN 3 AND 8
 * 
 * @author <a href="mailto:arkin@intalio.com">Assaf Arkin</a>
 * @version $Revision: 7123 $ $Date: 2005-03-24 03:45:01 -0700 (Thu, 24 Mar 2005) $
 */
public final class OracleQueryExpression extends JDBCQueryExpression {

	private static Log _log = LogFactory.getFactory().getInstance(OracleQueryExpression.class);

    public OracleQueryExpression(final Dialect dialect) {
        super(dialect);
    }

    public String getStatement(final boolean lock) throws Exception {
        StringBuffer sql = new StringBuffer();
        sql.append(Dialect.SELECT);
        if (_distinct) {
            sql.append(Dialect.DISTINCT);
        }

        sql.append(getColumnList());

        // add support for OQL LIMIT/OFFSET - part1
        if (_limit != null) {
            sql.append (" , rank() over ( ");
            // add ORDER BY clause
            if (_order != null) {
                sql.append(Dialect.ORDER_BY).append(_order);
            } else {
                throw new Exception("To use a LIMIT clause with Oracle, an ORDER BY clause is required.");
            }
            sql.append(" ) rnk ");
        }

        sql.append(Dialect.FROM);
        // Add all the tables to the FROM clause
        Iterator<String> it = _tables.keySet().iterator();
        while (it.hasNext()) {
            String tableAlias = it.next();
            String tableName = (String) _tables.get(tableAlias);
            if (tableAlias.equals(tableName)) {
                sql.append(_dialect.quoteName(tableName));
            } else {
                sql.append(_dialect.quoteName(tableName) + " "
                        + _dialect.quoteName(tableAlias));
            }
            if (it.hasNext()) {
                sql.append(Dialect.TABLE_SEPARATOR);
            }
        }
        boolean first = true;
        // Use asterisk notation to denote a left outer join
        // and equals to denote an inner join
        for (int i = 0; i < _joins.size(); ++i) {
            Join join;

            if (first) {
                sql.append(Dialect.WHERE);
                first = false;
            } else {
                sql.append(Dialect.AND);
            }

            join = _joins.get(i);
            for (int j = 0; j < join._leftColumns.length; ++j) {
                if (j > 0) {
                    sql.append(Dialect.AND);
                }

                sql.append(_dialect.quoteName(join._leftTable
                        + Dialect.TABLE_COLUMN_SEPARATOR
                        + join._leftColumns[j]));

                //if ( join.outer )
                //    sql.append( "(+)=" );
                //else
                //    sql.append( OpEquals );
                sql.append(OP_EQUALS);
                sql.append(_dialect.quoteName(join._rightTable
                        + Dialect.TABLE_COLUMN_SEPARATOR
                        + join._rightColumns[j]));
                if (join._outer) {
                    sql.append("(+)");
                }
            }
        }
        first = addWhereClause(sql, first);
        
        // add ORDER BY clause, but only if no LIMIT clause has been specified
        if ((_order != null) && (_limit == null)) {
            sql.append(Dialect.ORDER_BY).append(_order);
        }

        // Use FOR UPDATE to lock selected tables.
        if (lock) {
            sql.append(" FOR UPDATE");
        }

        // add LIMIT/OFFSET clause - part 2
        if (_limit != null) {
            // leads to problems when used with Castor's outer joins for master-details queries:
            // "ORA-00918: Spalte nicht eindeutig definiert"
            sql.insert (0, "select * from ( ");

            if (_offset != null) {
                sql.append (" ) where rnk - " + _offset + " between 1 and " + _limit + " ");
            } else {
                sql.append (" ) where rnk <= " + _limit + " ");
            }
        }

        if (_log.isDebugEnabled()) {
            _log.debug ("SQL statement = " + sql.toString());
        }
        return sql.toString();
    }


    /**
     * Indicates that Oracle supports an OQL LIMIT clause for versions >= 8.1.6.
     * 
     * @return true to indicate that Oracle supports an OQL LIMIT clause.
     */
    public boolean isLimitClauseSupported() {
        return true;
    }

    /**
     * Indicates that Oracle supports an OQL OFFSET clause for versions >= 8.1.6.
     * 
     * @return true to indicate that Oracle supports an OQL OFFSET clause.
     */
    public boolean isOffsetClauseSupported() {
        return true;
    }
}


