/**
 * dmLabLib, a Library created for use in various projects at the Data Mining Lab 
 * (http://dmlab.cs.gsu.edu/) of Georgia State University (http://www.gsu.edu/).  
 *  
 * Copyright (C) 2019 Georgia State University
 * 
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation version 3.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package edu.gsu.cs.dmlab.sparse.approximation.tests;

import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

import edu.gsu.cs.dmlab.exceptions.MatrixDimensionMismatch;
import edu.gsu.cs.dmlab.exceptions.VectorDimensionMismatch;
import edu.gsu.cs.dmlab.sparse.approximation.LARS_LassoSparseMatrixApproximator;
import edu.gsu.cs.dmlab.sparse.approximation.LassoMode;
import edu.gsu.cs.dmlab.sparse.approximation.interfaces.ISparseMatrixApproximator;
import smile.math.Math;
import smile.math.matrix.JMatrix;
import smile.math.matrix.SparseMatrix;

public class LARS_LassoSparseMatrixApproximatorTests {

	@Test
	public void testCompWithSpamAnsSetMode1() throws VectorDimensionMismatch, MatrixDimensionMismatch {
		double[][] X = {
				{ 0.89426, 0.19447, 0.56007, 0.58591, 0.88881, -0.33598, 0.39968, -0.09227, -0.06032, 0.17644, 0.07247,
						0.71349, 0.34327, 0.04276, 0.26023 },
				{ 0.16915, 0.72609, -0.11740, 0.08186, -0.40648, -0.87771, 0.27496, 0.52696, -0.43368, 0.97537,
						-0.73173, 0.02245, -0.08443, 0.53867, 0.86147 },
				{ 0.07855, 0.18378, -0.50802, -0.51790, -0.16558, 0.05375, 0.51755, 0.73297, -0.22633, -0.12991,
						-0.52756, -0.69668, -0.76961, 0.68556, -0.29880 },
				{ -0.22207, -0.60883, 0.44491, -0.42197, -0.10125, -0.30786, 0.16276, -0.31139, -0.68990, -0.01211,
						0.21551, 0.03263, 0.13643, -0.22292, -0.21267 },
				{ -0.34089, -0.17473, -0.46531, -0.45136, 0.08444, -0.13813, -0.68578, 0.28211, -0.53018, 0.02232,
						0.36683, 0.06328, 0.51393, -0.43396, 0.23589 } };

		double[][] D = {
				{ -0.43226, -0.48248, -0.26537, -0.22232, 0.03624, -0.42496, 0.32353, 0.27588, -0.65685, 0.44362,
						0.63198, 0.62269, -0.06507, -0.36859, 0.54211, -0.17860, 0.51460, 0.13098, 0.40871, 0.27474 },
				{ 0.44599, 0.00582, 0.81872, 0.09056, 0.25939, 0.68683, -0.48404, -0.75269, 0.41448, -0.34969, 0.64789,
						-0.21849, -0.27033, 0.66193, 0.76116, 0.82731, 0.38141, -0.54159, 0.79934, -0.20662 },
				{ 0.50651, 0.52484, -0.07106, 0.43821, 0.59507, 0.13729, -0.39485, 0.17669, 0.56712, -0.20704, -0.04988,
						-0.22987, 0.66883, 0.23142, 0.20948, -0.34107, 0.22700, -0.42406, 0.01332, -0.49021 },
				{ 0.42697, 0.31947, -0.09549, 0.28259, -0.70532, -0.54390, 0.15781, 0.09874, 0.27152, 0.71037, 0.31484,
						-0.48220, 0.40399, -0.45297, -0.23731, -0.03023, 0.72124, -0.46835, -0.34585, -0.07590 },
				{ -0.41879, 0.62423, -0.49509, -0.81883, -0.28251, -0.18165, 0.69298, 0.56248, 0.03743, -0.36528,
						0.28146, -0.52836, -0.55870, 0.40896, 0.16295, 0.40793, 0.13417, 0.53883, -0.27245,
						-0.79735 } };

		double[][] alphaAns = {
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, -0.33868, -0.67730, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						-0.09002, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, -0.11946, 0.00000, 0.00000, 0.00000, 0.17770, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.19401, -0.01553, 0.00000, 0.00000, 0.00000, 0.00000, 0.39955, 0.00000, 0.00000, -0.06436,
						-0.10875, -0.30394, 0.56750, 0.00000 },
				{ 0.00000, 0.08751, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.56981,
						0.00000, 0.21891, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.23724, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, -0.11600, -0.52206, 0.00000, 0.00000, 0.12660, 0.00000, 0.00000, -0.08223,
						-0.56173, -0.15370, 0.00000, 0.00000 },
				{ 0.00000, -0.09594, 0.60540, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.03089, 0.00000, 0.03797, -0.64003, 0.00000, 0.00000, -0.11012, 0.22453, 0.00000,
						0.30120, 0.04986, 0.00000, 0.07586 },
				{ 0.64373, 0.00000, 0.00000, 0.01873, 0.17040, 0.00000, 0.10970, 0.00000, 0.39780, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.54994, 0.00000, 0.00000, 0.00000, 0.00000,
						-0.04629, -0.35615, 0.00000, -0.13726 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.06415, 0.00000, 0.00000, -0.00237,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.28417, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.17123, 0.00000, 0.00000, -0.32275,
						0.00000, 0.00000, 0.04771, 0.11754 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, -0.15946, 0.00000, 0.00000, 0.00000, 0.32212, 0.00000,
						0.00000, 0.00000, 0.00000, 0.38445 },
				{ 0.20423, 0.00000, 0.00000, 0.00000, 0.12978, 0.00000, 0.05174, 0.00000, -0.46627, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.07809, -0.11629, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, -0.42610, 0.00000 },
				{ 0.00000, 0.58609, 0.00000, 0.09004, 0.00000, 0.00000, 0.39474, 0.00000, 0.00000, 0.28338, 0.00000,
						0.00000, 0.00000, 0.00000, 0.28711 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, -0.36754, 0.07771, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 } };

		double lambda = 0.25;

		LassoMode mode = LassoMode.PENALTY;
		ISparseMatrixApproximator lasso = new LARS_LassoSparseMatrixApproximator(lambda, mode);

		JMatrix Dm = new JMatrix(D);
		JMatrix Xm = new JMatrix(X);
		JMatrix alphaAnsm = new JMatrix(alphaAns);
		SparseMatrix alpha = lasso.estimateCoeffs(Xm, Dm);
		// System.out.println("X: (" + Xm.nrows() + ", " + Xm.ncols() + ")");
		// System.out.println("D: (" + Dm.nrows() + ", " + Dm.ncols() + ")");
		// System.out.println("alpha: (" + alpha.nrows() + ", " + alpha.ncols() + ")");
		// System.out.println("alphaAns: (" + alphaAnsm.nrows() + ", " +
		// alphaAnsm.ncols() + ")");
		double sqErr = 0;
		for (int i = 0; i < alpha.nrows(); i++) {
			for (int j = 0; j < alpha.ncols(); j++) {
				sqErr += Math.pow(alpha.get(i, j) - alphaAnsm.get(i, j), 2);
			}
		}
		// System.out.println("Squared Error: " + sqErr);
		assertTrue(sqErr < 0.8);

	}

	@Test
	public void testCompWithSpamAnsSetMode2() throws VectorDimensionMismatch, MatrixDimensionMismatch {
		double[][] X = {
				{ 0.89426, 0.19447, 0.56007, 0.58591, 0.88881, -0.33598, 0.39968, -0.09227, -0.06032, 0.17644, 0.07247,
						0.71349, 0.34327, 0.04276, 0.26023 },
				{ 0.16915, 0.72609, -0.11740, 0.08186, -0.40648, -0.87771, 0.27496, 0.52696, -0.43368, 0.97537,
						-0.73173, 0.02245, -0.08443, 0.53867, 0.86147 },
				{ 0.07855, 0.18378, -0.50802, -0.51790, -0.16558, 0.05375, 0.51755, 0.73297, -0.22633, -0.12991,
						-0.52756, -0.69668, -0.76961, 0.68556, -0.29880 },
				{ -0.22207, -0.60883, 0.44491, -0.42197, -0.10125, -0.30786, 0.16276, -0.31139, -0.68990, -0.01211,
						0.21551, 0.03263, 0.13643, -0.22292, -0.21267 },
				{ -0.34089, -0.17473, -0.46531, -0.45136, 0.08444, -0.13813, -0.68578, 0.28211, -0.53018, 0.02232,
						0.36683, 0.06328, 0.51393, -0.43396, 0.23589 } };

		double[][] D = {
				{ -0.43226, -0.48248, -0.26537, -0.22232, 0.03624, -0.42496, 0.32353, 0.27588, -0.65685, 0.44362,
						0.63198, 0.62269, -0.06507, -0.36859, 0.54211, -0.17860, 0.51460, 0.13098, 0.40871, 0.27474 },
				{ 0.44599, 0.00582, 0.81872, 0.09056, 0.25939, 0.68683, -0.48404, -0.75269, 0.41448, -0.34969, 0.64789,
						-0.21849, -0.27033, 0.66193, 0.76116, 0.82731, 0.38141, -0.54159, 0.79934, -0.20662 },
				{ 0.50651, 0.52484, -0.07106, 0.43821, 0.59507, 0.13729, -0.39485, 0.17669, 0.56712, -0.20704, -0.04988,
						-0.22987, 0.66883, 0.23142, 0.20948, -0.34107, 0.22700, -0.42406, 0.01332, -0.49021 },
				{ 0.42697, 0.31947, -0.09549, 0.28259, -0.70532, -0.54390, 0.15781, 0.09874, 0.27152, 0.71037, 0.31484,
						-0.48220, 0.40399, -0.45297, -0.23731, -0.03023, 0.72124, -0.46835, -0.34585, -0.07590 },
				{ -0.41879, 0.62423, -0.49509, -0.81883, -0.28251, -0.18165, 0.69298, 0.56248, 0.03743, -0.36528,
						0.28146, -0.52836, -0.55870, 0.40896, 0.16295, 0.40793, 0.13417, 0.53883, -0.27245,
						-0.79735 } };

		double[][] alphaAns = {
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, -0.15000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.10141, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.03950, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.15000,
						0.00000, 0.15000, -0.11050, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, -0.15000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						-0.15000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.15000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, -0.15000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.15000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.01332, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.15000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.02371 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.05668, 0.00000,
						0.00000, 0.00000, 0.00000, 0.12629 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, -0.13668, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, -0.04859, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.15000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.09332, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 },
				{ 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
						0.00000, 0.00000, 0.00000, 0.00000 } };

		double lambda = 0.15;

		LassoMode mode = LassoMode.L1COEFF;
		ISparseMatrixApproximator lasso = new LARS_LassoSparseMatrixApproximator(lambda, mode);

		SparseMatrix alpha = lasso.estimateCoeffs(new JMatrix(X), new JMatrix(D));
		double sqErr = 0;
		for (int i = 0; i < alpha.nrows(); i++) {
			for (int j = 0; j < alpha.ncols(); j++) {
				sqErr += Math.pow(alpha.get(i, j) - alphaAns[i][j], 2);
			}
		}
		// System.out.println("Squared Error: " + sqErr);
		assertTrue(sqErr < 1e-9);

	}

}
