#!/bin/bash

#
# This file will create a new settings.xml file in this directory containing the variables set 
# for a ssh username but now password because we will be using ssh_key.
#
# If you don't have a CloudRepo account, create a free trial at https://www.cloudrepo.io
#

#
# Variables to ensure that we read and write out files to the source directory even if we execute from outside.
#
#
#
# Required globals:
#   DEPLOY_USER
#   SERVER
#   REMOTE_PATH
#   LOCAL_PATH
#
# Optional globals:
#   SSH_KEY
#   EXTRA_ARGS
#   DEBUG
#   SSH_PORT


validate() {
	# mandatory parameters
	: DEPLOY_USER=${DEPLOY_USER:?'DEPLOY_USER variable missing.'}
		
	echo "Checking for presence of DEPLOY_USER environment variable...."
	if [ $DEPLOY_USER ];
	then
	  echo "Success - Found SSH Username in environment variables...";
	else
	  >&2 echo "Failure - DEPLOY_USER environment variable not set.  Please set this environment variable and try again."
	  exit 1
	fi;
	
}

setup_settings_file(){
	local DIR="$(dirname "${BASH_SOURCE[0]}")"
	local TEMPLATE_FILE=${DIR}/settings.template.xml
	local DESTINATION_FILE=$DIR/settings.xml
	local GITIGNORE=$DIR/.gitignore
	echo "Environment Variables Set, Creating ${DESTINATION_FILE} file..."
	
	if [ -f $TEMPLATE_FILE ]; then
	   if cat $TEMPLATE_FILE | sed  "s/%DEPLOY_USER%/$DEPLOY_USER/g" | sed "s/generation text/ATTENTION: This file was generated by the create-settings.sh script.  Do not commit it to version control as it contains credentials!/" > $DESTINATION_FILE; then
	
	      #
	      # Let's warn users if they don't have the generated settings.xml file in their .gitignore file.
	      #
	      # If you don't put the settings.xml file in .gitignore, the maven release plugin will fail during the `mvn release:prepare` step.
	      #
	      if grep -q "^$DEST_FILE_NAME$" $GITIGNORE; then
	         echo "Success - $DEST_FILE_NAME found in $GITIGNORE file.  This will prevent git from saving the credentials in version control."
	         else
	         echo "Warning - $DEST_FILE_NAME not found in $GITIGNORE file.  Add $DEST_FILE_NAME to $GITIGNORE to ensure you don't accidently commit your credentials!"
	      fi
	
	      #
	      # Success, we're done here.
	      #
	      echo "Success - $DESTINATION_FILE file successfully created.  Make sure you do not commit this file to source control."
	   else
	      >&2 echo "Failure - There was an error creating the $DESTINATION_FILE";
	      exit 3;
	
	   fi;
	else
	   >&2 echo "Failure - $TEMPLATE_FILE does not exist";
	   exit 4;
	fi;
}

setup_ssh_dir() {
  INJECTED_SSH_CONFIG_DIR="/opt/atlassian/pipelines/agent/ssh"
  # The default ssh key with open perms readable by alt uids
  IDENTITY_FILE="${INJECTED_SSH_CONFIG_DIR}/id_rsa_tmp"
  # The default known_hosts file
  KNOWN_HOSTS_FILE="${INJECTED_SSH_CONFIG_DIR}/known_hosts"

  mkdir -p ~/.ssh || echo "adding ssh keys to existing ~/.ssh"
  touch ~/.ssh/authorized_keys
  echo "In ssh setup.";
  # If given, use SSH_KEY, otherwise check if the default is configured and use it
  if [ "${SSH_KEY}" != "" ]; then
     echo "Using passed SSH_KEY"
     (umask  077 ; echo ${SSH_KEY} | base64 -d > ~/.ssh/pipelines_id)
  elif [ ! -f ${IDENTITY_FILE} ]; then
     echo "No default SSH key configured in Pipelines."
     exit 1
  else
     echo "Using default ssh key"
     cp ${IDENTITY_FILE} ~/.ssh/pipelines_id
  fi

  if [ ! -f ${KNOWN_HOSTS_FILE} ]; then
      error "No SSH known_hosts configured in Pipelines."
      exit 2
  fi

  cat ${KNOWN_HOSTS_FILE} >> ~/.ssh/known_hosts
  if [ -f ~/.ssh/config ]; then
      echo "Appending to existing ~/.ssh/config file"
  fi
  echo "IdentityFile ~/.ssh/pipelines_id" >> ~/.ssh/config
  chmod -R go-rwx ~/.ssh/
}

validate
setup_settings_file
setup_ssh_dir


exit 0
