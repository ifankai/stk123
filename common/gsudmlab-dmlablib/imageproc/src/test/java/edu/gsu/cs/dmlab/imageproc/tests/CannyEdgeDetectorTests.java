/**
 * dmLabLib, a Library created for use in various projects at the Data Mining Lab 
 * (http://dmlab.cs.gsu.edu/) of Georgia State University (http://www.gsu.edu/).  
 *  
 * Copyright (C) 2019 Georgia State University
 * 
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation version 3.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package edu.gsu.cs.dmlab.imageproc.tests;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import edu.gsu.cs.dmlab.imageproc.edgedetection.CannyEdgeDetector;

public class CannyEdgeDetectorTests {

	@Test
	public void test1EdgeDetectorIdx1() {

		double lt = -1;
		double ht = 7.5;
		double gkRadius = 2.0;
		int gkWidth = 16;
		boolean normalized = false;

		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			new CannyEdgeDetector(lt, ht, gkRadius, gkWidth, normalized);
		});
	}

	@Test
	public void test1EdgeDetectorIdx2() {

		double lt = 2.5;
		double ht = -1;
		double gkRadius = 2.0;
		int gkWidth = 16;
		boolean normalized = false;
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			new CannyEdgeDetector(lt, ht, gkRadius, gkWidth, normalized);
		});
	}

	@Test
	public void test1EdgeDetectorIdx3() {

		double lt = 2.5;
		double ht = 7.5;
		double gkRadius = 2.0;
		int gkWidth = 1;
		boolean normalized = false;
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			new CannyEdgeDetector(lt, ht, gkRadius, gkWidth, normalized);
		});
	}

	@Test
	public void test2ThresholdEdgesIdx0() {

		double lt = 2.5;
		double ht = 7.5;
		double gkRadius = 2.0;
		int gkWidth = 16;
		boolean normalized = false;
		double[] colors = new double[] { 0.0, 255.0 };
		double[] data = new double[9];
		for (int i = 0; i < data.length; i++) {
			data[i] = i * 2;
		}

		CannyEdgeDetector ced = new CannyEdgeDetector(lt, ht, gkRadius, gkWidth, normalized);
		ced.thresholdEdges(data.length, data, colors);
		assertArrayEquals(colors, new double[] { 0.0, 255.0 }, 0.0001);
	}

	@Test
	public void test2ThresholdEdgesIdx1() {

		double lt = 2.5;
		double ht = 7.5;
		double gkRadius = 2.0;
		int gkWidth = 16;
		boolean normalized = false;
		double[] colors = new double[] { 0.0, 255.0 };
		double[] data = new double[9];
		for (int i = 0; i < data.length; i++) {
			data[i] = i * 2;
		}

		CannyEdgeDetector ced = new CannyEdgeDetector(lt, ht, gkRadius, gkWidth, normalized);
		ced.thresholdEdges(data.length, data, colors);
		// assertEquals(0xff000000, data[0], 0.000001);
		assertEquals(0, data[0], 0.000001);
		// assertEquals(-1, data[1], 0.000001);
		assertEquals(255, data[1], 0.000001);
	}

	/*
	 * The following test makes sure that the output of the method 'getEdgesImage()'
	 * contains ONLY two values: 0xff000000 (=-16777216) and -1
	 */
	@Test
	public void test3GetEdgesImageIdx1() {

		double lt = 2.5;
		double ht = 7.5;
		double gkRadius = 2.0;
		int gkWidth = 16;
		boolean normalized = false;
		double[] colors = new double[] { 0.0, 255.0 };
		// The following array comes from an SDO image scaled to 64X64 pixels.
		double[][] image = new double[][] {
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 0, 2, 2, 4, 3, 2, 2, 3, 4, 5, 6, 6, 7, 5, 5, 6, 4,
						4, 4, 2, 3, 2, 3, 0, 1, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 6, 5, 7, 6, 7, 7, 6, 10, 11, 12, 12, 13, 11,
						7, 5, 7, 6, 7, 5, 4, 2, 4, 2, 3, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,
						0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 3, 3, 3, 4, 5, 7, 8, 13, 11, 16, 16, 20, 20, 21, 22, 24,
						22, 17, 14, 15, 15, 11, 9, 6, 4, 4, 4, 3, 1, 3, 2, 1, 3, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 4, 4, 4, 7, 10, 12, 15, 23, 25, 22, 27, 29, 34, 33, 35,
						38, 39, 24, 25, 28, 26, 18, 18, 15, 13, 7, 7, 5, 4, 6, 6, 4, 4, 2, 2, 1, 2, 2, 1, 1, 1, 0, 0, 0,
						0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 2, 3, 4, 5, 5, 7, 11, 11, 13, 19, 19, 22, 32, 41, 45, 50, 51, 59, 58,
						61, 64, 69, 57, 47, 47, 42, 37, 35, 27, 20, 18, 15, 14, 14, 12, 9, 6, 3, 5, 4, 3, 2, 2, 2, 2, 2,
						1, 1, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 1, 2, 4, 4, 4, 4, 5, 6, 7, 9, 10, 13, 15, 20, 25, 29, 33, 51, 66, 71, 83, 86, 93, 97,
						103, 110, 116, 117, 100, 88, 84, 79, 73, 52, 34, 26, 27, 25, 23, 23, 19, 12, 9, 8, 6, 4, 2, 2,
						2, 2, 1, 2, 1, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 1, 1, 2, 4, 5, 6, 7, 7, 9, 11, 14, 14, 19, 20, 29, 35, 45, 51, 80, 105, 118, 133, 142,
						148, 153, 158, 172, 178, 180, 175, 170, 167, 155, 140, 97, 72, 67, 59, 47, 39, 34, 27, 19, 16,
						14, 11, 6, 3, 2, 3, 2, 2, 1, 1, 2, 1, 1, 0, 0, 0 },
				{ 0, 0, 0, 1, 2, 2, 3, 5, 7, 7, 8, 9, 11, 16, 20, 20, 23, 27, 39, 59, 73, 85, 124, 166, 173, 177, 179,
						169, 154, 132, 134, 138, 142, 150, 149, 146, 152, 168, 164, 167, 144, 112, 89, 75, 52, 36, 30,
						24, 21, 16, 11, 6, 4, 4, 5, 4, 2, 2, 3, 3, 1, 0, 0, 1 },
				{ 0, 1, 1, 2, 4, 5, 6, 4, 11, 8, 14, 14, 15, 17, 24, 27, 28, 43, 61, 96, 118, 149, 170, 184, 160, 153,
						153, 147, 135, 142, 131, 120, 124, 135, 137, 145, 136, 143, 147, 160, 155, 174, 171, 134, 91,
						54, 54, 35, 28, 22, 14, 7, 5, 7, 4, 3, 5, 4, 3, 4, 2, 1, 0, 0 },
				{ 0, 1, 1, 2, 3, 6, 7, 6, 9, 16, 12, 21, 24, 27, 31, 46, 52, 79, 123, 154, 176, 162, 137, 136, 127, 116,
						105, 119, 120, 115, 110, 119, 121, 119, 124, 133, 132, 123, 128, 130, 133, 120, 137, 173, 180,
						105, 88, 52, 40, 25, 16, 16, 12, 8, 8, 4, 6, 5, 7, 6, 3, 2, 1, 0 },
				{ 0, 1, 0, 2, 4, 7, 9, 11, 8, 11, 24, 23, 31, 34, 45, 61, 90, 135, 182, 174, 136, 120, 101, 123, 120,
						114, 107, 103, 94, 90, 98, 113, 125, 128, 123, 131, 127, 130, 122, 113, 114, 108, 92, 116, 128,
						175, 165, 85, 53, 34, 21, 21, 16, 9, 9, 10, 7, 6, 10, 8, 5, 4, 2, 0 },
				{ 2, 2, 1, 2, 4, 7, 12, 14, 11, 16, 25, 30, 36, 51, 64, 96, 166, 183, 141, 139, 126, 111, 94, 93, 95,
						89, 101, 91, 80, 80, 100, 91, 93, 129, 124, 121, 105, 121, 116, 110, 111, 117, 112, 106, 111,
						120, 132, 159, 89, 44, 34, 24, 21, 12, 17, 14, 12, 10, 14, 9, 6, 6, 3, 1 },
				{ 5, 4, 2, 3, 4, 8, 12, 16, 16, 23, 29, 34, 46, 69, 102, 167, 167, 132, 111, 125, 116, 89, 100, 85, 104,
						99, 95, 91, 91, 95, 92, 99, 101, 109, 117, 129, 119, 113, 97, 118, 112, 140, 125, 95, 89, 85,
						117, 107, 129, 64, 38, 33, 27, 24, 20, 18, 16, 14, 17, 12, 10, 8, 5, 1 },
				{ 8, 6, 3, 4, 6, 10, 14, 19, 22, 25, 35, 47, 58, 93, 161, 131, 131, 140, 102, 94, 106, 93, 99, 100, 97,
						98, 92, 102, 92, 97, 85, 74, 110, 115, 116, 106, 106, 94, 98, 97, 105, 157, 151, 97, 95, 94, 92,
						110, 115, 110, 62, 41, 33, 28, 25, 23, 20, 19, 19, 15, 12, 9, 6, 2 },
				{ 12, 10, 3, 5, 7, 13, 18, 22, 25, 29, 45, 59, 81, 158, 124, 124, 148, 151, 80, 112, 102, 82, 66, 83,
						106, 115, 95, 97, 101, 99, 83, 104, 103, 83, 80, 94, 91, 68, 70, 78, 90, 115, 125, 105, 98, 90,
						98, 121, 93, 113, 125, 64, 53, 38, 29, 27, 25, 25, 23, 20, 16, 11, 6, 2 },
				{ 17, 14, 5, 6, 9, 15, 20, 26, 31, 37, 48, 87, 132, 135, 138, 140, 127, 134, 120, 151, 107, 104, 84, 96,
						129, 113, 93, 123, 73, 57, 47, 87, 62, 76, 91, 62, 66, 61, 73, 57, 64, 89, 97, 97, 94, 89, 75,
						120, 117, 109, 128, 153, 78, 58, 43, 39, 31, 32, 26, 23, 17, 11, 5, 2 },
				{ 23, 21, 6, 9, 12, 15, 19, 26, 37, 47, 60, 146, 141, 115, 128, 165, 134, 173, 128, 109, 149, 115, 133,
						153, 140, 114, 89, 65, 61, 57, 78, 60, 47, 60, 67, 68, 61, 79, 64, 65, 69, 70, 86, 91, 97, 81,
						82, 95, 93, 122, 136, 173, 182, 83, 67, 52, 45, 33, 33, 28, 15, 7, 7, 4 },
				{ 25, 28, 14, 11, 16, 17, 20, 28, 36, 60, 80, 189, 160, 102, 86, 117, 107, 102, 115, 157, 189, 126, 183,
						122, 131, 96, 84, 98, 51, 68, 73, 73, 70, 87, 70, 74, 82, 74, 58, 66, 73, 93, 90, 64, 70, 88,
						94, 92, 94, 109, 199, 248, 218, 150, 92, 61, 59, 48, 31, 23, 13, 7, 5, 5 },
				{ 26, 32, 27, 16, 15, 17, 26, 35, 40, 54, 167, 184, 125, 120, 75, 88, 115, 126, 113, 132, 183, 137, 137,
						123, 92, 86, 79, 96, 93, 82, 82, 77, 74, 76, 80, 72, 70, 53, 49, 60, 78, 92, 75, 62, 65, 65, 97,
						110, 80, 96, 116, 177, 214, 188, 128, 100, 81, 53, 28, 17, 11, 8, 10, 12 },
				{ 24, 32, 38, 33, 25, 22, 28, 36, 45, 76, 163, 165, 138, 125, 102, 123, 162, 141, 186, 180, 158, 131,
						145, 122, 109, 191, 226, 144, 143, 86, 70, 74, 84, 98, 88, 93, 79, 77, 58, 59, 75, 86, 95, 78,
						72, 82, 98, 78, 108, 92, 106, 148, 187, 171, 143, 151, 105, 61, 36, 25, 17, 15, 17, 17 },
				{ 24, 31, 37, 45, 51, 49, 42, 47, 67, 122, 144, 120, 109, 119, 120, 127, 117, 201, 254, 249, 232, 199,
						167, 139, 113, 170, 239, 222, 205, 132, 94, 84, 87, 90, 104, 112, 89, 59, 50, 47, 67, 72, 113,
						111, 100, 106, 133, 75, 85, 127, 101, 140, 146, 149, 213, 188, 81, 57, 46, 41, 30, 26, 24, 19 },
				{ 16, 23, 33, 47, 58, 75, 98, 130, 148, 160, 105, 99, 94, 113, 134, 143, 133, 171, 250, 255, 255, 241,
						180, 106, 127, 163, 199, 136, 95, 96, 176, 101, 91, 75, 80, 89, 136, 70, 52, 56, 68, 59, 59, 87,
						104, 143, 101, 116, 105, 117, 80, 99, 117, 101, 192, 185, 98, 84, 64, 55, 45, 36, 30, 26 },
				{ 14, 19, 23, 34, 52, 73, 122, 195, 238, 122, 136, 121, 107, 145, 154, 167, 176, 189, 255, 250, 252,
						242, 198, 84, 76, 130, 120, 94, 93, 105, 176, 102, 148, 107, 80, 99, 149, 116, 101, 88, 83, 64,
						69, 94, 72, 111, 202, 129, 113, 86, 82, 124, 104, 141, 139, 222, 178, 142, 99, 71, 52, 41, 31,
						26 },
				{ 19, 18, 23, 34, 47, 68, 112, 176, 149, 121, 117, 102, 125, 111, 111, 101, 119, 151, 171, 220, 221,
						117, 149, 104, 79, 94, 117, 83, 88, 105, 145, 105, 107, 101, 104, 125, 108, 149, 124, 167, 141,
						78, 62, 84, 96, 129, 73, 123, 125, 102, 105, 122, 131, 140, 202, 203, 201, 150, 111, 75, 50, 40,
						33, 22 },
				{ 15, 16, 21, 28, 38, 57, 86, 141, 128, 107, 89, 105, 94, 79, 92, 97, 112, 141, 147, 195, 175, 117, 82,
						76, 81, 89, 99, 84, 95, 107, 205, 124, 87, 74, 69, 70, 134, 175, 112, 110, 199, 117, 54, 56, 70,
						77, 94, 72, 93, 104, 129, 147, 152, 233, 175, 215, 250, 204, 147, 74, 47, 32, 26, 19 },
				{ 20, 23, 27, 35, 48, 70, 107, 152, 121, 140, 115, 100, 105, 108, 76, 88, 118, 136, 140, 151, 169, 116,
						103, 95, 97, 116, 94, 99, 85, 127, 97, 93, 94, 94, 100, 76, 77, 85, 107, 166, 81, 78, 59, 54,
						69, 82, 79, 92, 64, 74, 116, 195, 172, 182, 195, 229, 232, 227, 133, 88, 56, 44, 28, 23 },
				{ 21, 24, 28, 42, 57, 74, 121, 164, 144, 153, 123, 92, 93, 90, 84, 94, 114, 139, 76, 139, 161, 119, 72,
						104, 134, 132, 123, 110, 124, 95, 88, 63, 96, 107, 92, 91, 78, 85, 83, 83, 78, 79, 54, 52, 58,
						68, 77, 80, 52, 60, 75, 181, 238, 137, 216, 240, 249, 220, 106, 66, 73, 54, 35, 25 },
				{ 17, 24, 28, 38, 46, 72, 120, 145, 146, 140, 90, 81, 74, 96, 93, 95, 99, 87, 73, 124, 141, 123, 65, 76,
						163, 104, 113, 112, 86, 112, 112, 61, 92, 88, 96, 111, 101, 68, 68, 79, 73, 72, 79, 62, 44, 49,
						62, 73, 65, 60, 78, 121, 160, 137, 130, 182, 242, 193, 107, 71, 70, 63, 53, 33 },
				{ 13, 18, 21, 36, 51, 71, 109, 145, 136, 121, 100, 85, 83, 90, 96, 77, 88, 62, 72, 113, 139, 116, 90,
						66, 98, 103, 84, 90, 105, 120, 90, 67, 91, 100, 89, 85, 100, 88, 78, 92, 90, 70, 52, 56, 36, 42,
						51, 41, 71, 59, 78, 89, 120, 94, 96, 111, 172, 248, 146, 101, 75, 71, 59, 41 },
				{ 14, 21, 29, 38, 52, 78, 117, 144, 136, 122, 90, 91, 97, 100, 77, 82, 98, 73, 66, 114, 141, 123, 72,
						126, 108, 96, 96, 78, 76, 118, 88, 89, 89, 119, 108, 101, 96, 95, 72, 84, 80, 56, 56, 46, 54,
						57, 50, 45, 79, 61, 75, 75, 85, 94, 112, 89, 119, 211, 190, 128, 95, 75, 59, 46 },
				{ 17, 22, 27, 43, 59, 80, 129, 144, 105, 103, 112, 121, 112, 98, 84, 87, 65, 96, 97, 126, 126, 104, 101,
						133, 101, 101, 128, 79, 76, 92, 80, 74, 80, 104, 116, 86, 87, 82, 69, 74, 87, 74, 57, 78, 82,
						71, 59, 79, 80, 65, 97, 77, 79, 104, 132, 90, 126, 187, 170, 121, 111, 84, 65, 48 },
				{ 14, 24, 30, 46, 57, 78, 147, 138, 96, 130, 119, 117, 121, 92, 79, 68, 66, 76, 84, 135, 122, 152, 155,
						98, 87, 104, 139, 93, 74, 79, 72, 77, 67, 97, 93, 70, 65, 78, 77, 59, 71, 68, 91, 97, 107, 89,
						67, 88, 84, 78, 105, 98, 123, 115, 120, 75, 141, 136, 93, 88, 100, 98, 70, 52 },
				{ 16, 24, 31, 37, 51, 92, 162, 135, 120, 123, 143, 144, 99, 91, 78, 73, 52, 66, 106, 122, 124, 87, 115,
						111, 106, 92, 122, 190, 97, 82, 101, 68, 76, 90, 83, 63, 58, 77, 66, 52, 56, 51, 77, 109, 193,
						107, 102, 87, 92, 66, 117, 112, 99, 93, 99, 118, 146, 148, 111, 73, 81, 88, 71, 56 },
				{ 16, 21, 26, 36, 62, 102, 161, 139, 125, 135, 152, 123, 77, 86, 90, 71, 65, 72, 120, 153, 100, 83, 115,
						107, 82, 83, 120, 193, 219, 95, 119, 101, 105, 102, 89, 82, 71, 75, 73, 64, 67, 61, 86, 165,
						212, 111, 97, 114, 98, 78, 89, 121, 82, 87, 111, 125, 156, 178, 110, 75, 73, 73, 49, 34 },
				{ 11, 20, 28, 45, 64, 100, 167, 157, 135, 140, 146, 145, 96, 78, 90, 94, 100, 94, 155, 183, 101, 77, 97,
						113, 95, 108, 112, 131, 218, 191, 167, 187, 109, 107, 72, 65, 69, 48, 60, 77, 84, 146, 166, 120,
						105, 95, 87, 100, 97, 99, 82, 135, 84, 77, 97, 129, 143, 192, 115, 75, 66, 62, 36, 28 },
				{ 10, 20, 30, 44, 61, 103, 167, 164, 136, 147, 148, 143, 100, 102, 99, 109, 120, 152, 190, 146, 98, 85,
						90, 69, 73, 129, 145, 133, 132, 213, 221, 158, 86, 96, 76, 65, 65, 70, 61, 48, 64, 77, 120, 79,
						77, 86, 112, 122, 92, 103, 101, 86, 69, 91, 78, 143, 162, 171, 100, 84, 72, 65, 41, 25 },
				{ 12, 20, 23, 43, 69, 102, 151, 164, 132, 165, 200, 146, 108, 133, 139, 146, 163, 202, 212, 101, 87, 65,
						58, 63, 88, 120, 228, 237, 204, 178, 142, 146, 137, 107, 85, 80, 61, 72, 71, 76, 56, 67, 76, 63,
						102, 86, 96, 113, 95, 89, 84, 82, 72, 74, 83, 129, 154, 188, 135, 89, 61, 53, 39, 26 },
				{ 11, 18, 29, 42, 64, 94, 128, 168, 122, 149, 162, 150, 181, 177, 159, 194, 191, 240, 190, 105, 103, 63,
						85, 79, 64, 96, 173, 242, 161, 114, 127, 93, 101, 106, 76, 64, 87, 90, 109, 97, 83, 74, 71, 67,
						89, 79, 85, 75, 82, 95, 98, 76, 73, 81, 88, 160, 161, 161, 103, 78, 58, 42, 27, 21 },
				{ 12, 20, 28, 45, 58, 82, 114, 167, 113, 134, 128, 128, 113, 196, 254, 247, 223, 175, 99, 83, 81, 83,
						111, 101, 81, 106, 151, 162, 144, 101, 106, 134, 150, 79, 65, 66, 73, 100, 161, 112, 86, 80, 91,
						72, 86, 67, 61, 86, 95, 111, 118, 91, 61, 106, 115, 130, 184, 120, 82, 51, 49, 40, 26, 16 },
				{ 14, 24, 27, 42, 57, 82, 109, 155, 129, 131, 144, 139, 134, 172, 247, 247, 142, 138, 68, 97, 90, 56,
						110, 79, 90, 100, 102, 87, 116, 91, 87, 89, 104, 97, 78, 70, 85, 75, 96, 133, 118, 77, 84, 93,
						76, 66, 78, 90, 104, 114, 92, 70, 109, 134, 142, 158, 172, 99, 74, 57, 37, 25, 21, 10 },
				{ 15, 25, 30, 39, 59, 77, 95, 134, 167, 124, 149, 132, 148, 182, 222, 175, 143, 100, 78, 53, 88, 71, 63,
						86, 83, 90, 109, 93, 72, 74, 79, 91, 88, 114, 93, 86, 71, 61, 62, 111, 125, 90, 94, 81, 68, 87,
						80, 88, 136, 148, 100, 81, 136, 155, 144, 148, 144, 92, 56, 35, 23, 14, 7, 1 },
				{ 14, 25, 30, 36, 51, 68, 88, 125, 183, 148, 150, 147, 138, 144, 149, 131, 104, 86, 118, 107, 149, 93,
						95, 116, 110, 105, 86, 56, 77, 72, 84, 86, 84, 93, 122, 97, 68, 66, 60, 78, 98, 88, 86, 89, 84,
						91, 67, 68, 157, 231, 191, 129, 179, 147, 138, 132, 103, 59, 34, 27, 20, 13, 9, 7 },
				{ 14, 21, 28, 36, 47, 60, 70, 91, 159, 179, 144, 133, 117, 122, 101, 119, 123, 125, 209, 157, 94, 126,
						95, 115, 103, 97, 59, 59, 75, 86, 85, 74, 65, 65, 102, 109, 87, 69, 85, 68, 83, 90, 82, 94, 118,
						75, 56, 70, 220, 221, 216, 155, 159, 110, 119, 144, 85, 51, 33, 27, 21, 13, 6, 3 },
				{ 8, 16, 23, 31, 44, 56, 67, 82, 113, 159, 123, 122, 106, 95, 107, 96, 114, 131, 118, 142, 122, 124,
						140, 95, 90, 73, 64, 77, 78, 60, 66, 58, 40, 55, 59, 84, 87, 78, 75, 65, 87, 106, 83, 109, 136,
						67, 57, 82, 117, 169, 173, 145, 100, 120, 155, 141, 70, 45, 32, 26, 19, 15, 11, 6 },
				{ 3, 10, 14, 24, 37, 46, 52, 66, 86, 141, 142, 115, 123, 114, 144, 133, 116, 110, 111, 103, 113, 95,
						112, 91, 71, 61, 63, 87, 67, 90, 73, 59, 40, 58, 48, 58, 73, 83, 95, 86, 65, 114, 100, 89, 85,
						58, 60, 57, 90, 135, 132, 127, 94, 141, 183, 74, 60, 43, 33, 26, 19, 13, 10, 5 },
				{ 1, 6, 12, 16, 25, 33, 44, 58, 80, 107, 155, 132, 128, 167, 204, 137, 117, 91, 104, 94, 103, 100, 83,
						77, 62, 47, 54, 61, 59, 87, 79, 64, 51, 63, 102, 58, 73, 57, 70, 60, 61, 62, 79, 65, 61, 59, 74,
						89, 115, 101, 125, 126, 138, 166, 104, 55, 44, 35, 29, 24, 15, 9, 5, 0 },
				{ 1, 3, 5, 12, 22, 29, 42, 50, 70, 91, 130, 167, 128, 129, 115, 96, 97, 99, 74, 88, 85, 97, 90, 67, 52,
						60, 58, 53, 52, 72, 75, 49, 52, 69, 95, 77, 72, 66, 69, 77, 87, 84, 60, 76, 74, 87, 75, 78, 111,
						128, 120, 116, 138, 101, 65, 44, 28, 24, 22, 17, 13, 10, 8, 1 },
				{ 1, 2, 5, 10, 16, 25, 37, 45, 55, 80, 109, 162, 146, 149, 121, 117, 120, 105, 106, 89, 69, 79, 60, 51,
						42, 61, 74, 50, 75, 66, 65, 54, 56, 74, 84, 60, 58, 55, 72, 74, 80, 89, 83, 97, 87, 88, 105, 99,
						110, 110, 114, 83, 114, 64, 44, 30, 28, 21, 16, 14, 9, 5, 3, 1 },
				{ 0, 1, 4, 7, 12, 19, 25, 32, 46, 71, 95, 127, 161, 132, 130, 121, 118, 119, 109, 101, 58, 73, 64, 75,
						74, 69, 59, 70, 62, 67, 71, 66, 86, 82, 104, 67, 59, 61, 71, 86, 91, 91, 101, 77, 89, 102, 98,
						103, 107, 104, 89, 143, 71, 44, 34, 26, 21, 16, 12, 7, 5, 2, 1, 1 },
				{ 0, 0, 2, 3, 7, 13, 20, 27, 41, 49, 69, 80, 99, 150, 140, 140, 111, 96, 80, 86, 101, 71, 75, 76, 113,
						91, 79, 85, 95, 78, 74, 83, 79, 88, 94, 88, 91, 67, 70, 51, 81, 81, 69, 66, 84, 81, 72, 78, 82,
						79, 166, 117, 53, 31, 24, 23, 15, 12, 9, 6, 3, 1, 0, 0 },
				{ 0, 0, 1, 1, 4, 9, 14, 20, 27, 32, 39, 46, 62, 90, 176, 154, 109, 83, 73, 80, 90, 68, 88, 87, 100, 93,
						101, 99, 112, 99, 81, 84, 85, 87, 100, 110, 93, 79, 65, 73, 68, 63, 64, 75, 88, 85, 64, 86, 104,
						177, 147, 64, 46, 22, 20, 15, 11, 7, 6, 3, 2, 1, 0, 0 },
				{ 0, 0, 1, 1, 2, 5, 7, 12, 17, 20, 22, 32, 36, 55, 86, 164, 134, 74, 83, 87, 89, 96, 91, 101, 101, 111,
						97, 110, 87, 93, 88, 98, 88, 93, 99, 97, 107, 87, 78, 79, 94, 78, 104, 71, 88, 109, 121, 141,
						200, 160, 80, 45, 34, 17, 14, 14, 7, 5, 3, 2, 1, 1, 1, 1 },
				{ 0, 0, 0, 1, 1, 2, 4, 6, 6, 10, 16, 16, 23, 29, 49, 82, 141, 117, 87, 114, 91, 112, 132, 111, 109, 115,
						116, 110, 85, 85, 90, 84, 87, 91, 90, 99, 111, 90, 106, 126, 105, 95, 102, 114, 113, 140, 164,
						219, 155, 89, 52, 28, 24, 16, 11, 5, 4, 3, 2, 1, 1, 1, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 4, 11, 14, 15, 24, 41, 49, 91, 121, 137, 145, 130, 147, 127, 122, 120,
						115, 100, 108, 79, 71, 59, 72, 72, 80, 83, 78, 112, 111, 135, 123, 128, 127, 140, 134, 190, 202,
						141, 86, 47, 34, 23, 12, 12, 8, 0, 2, 1, 0, 0, 1, 1, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 2, 1, 0, 3, 3, 3, 4, 8, 15, 16, 22, 42, 58, 130, 171, 154, 149, 145, 128, 123, 108,
						86, 95, 76, 67, 65, 95, 107, 112, 91, 108, 118, 142, 115, 125, 142, 154, 171, 200, 157, 116, 73,
						44, 28, 21, 14, 6, 8, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 3, 0, 2, 6, 8, 5, 9, 19, 30, 58, 109, 155, 181, 150, 108, 73, 66, 76,
						81, 79, 60, 84, 102, 113, 119, 123, 107, 84, 125, 131, 146, 176, 176, 147, 108, 90, 67, 44, 25,
						19, 9, 7, 3, 3, 6, 2, 1, 1, 0, 0, 0, 0, 0, 0 },
				{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 3, 4, 7, 10, 19, 28, 40, 67, 95, 124, 133, 112, 88, 104,
						102, 103, 99, 99, 76, 84, 88, 111, 98, 81, 114, 136, 130, 117, 101, 78, 63, 53, 46, 28, 16, 10,
						5, 4, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 4, 6, 11, 14, 18, 27, 39, 55, 75, 82, 102, 146, 126,
						130, 131, 137, 112, 106, 113, 122, 114, 101, 112, 119, 94, 69, 55, 47, 40, 27, 24, 22, 13, 5, 3,
						2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 4, 7, 9, 14, 14, 20, 31, 39, 48, 63, 92, 73, 77,
						83, 98, 91, 78, 87, 86, 77, 66, 64, 73, 70, 45, 31, 30, 26, 17, 13, 16, 7, 4, 1, 1, 0, 1, 1, 0,
						0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 3, 3, 6, 5, 12, 21, 23, 26, 38, 51, 39, 38, 45,
						55, 59, 44, 50, 51, 51, 44, 34, 40, 45, 34, 23, 13, 9, 9, 6, 4, 4, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0,
						0, 0, 0, 0, 0 },
				{ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 7, 9, 12, 11, 22, 31, 22, 23, 26,
						30, 31, 24, 27, 30, 32, 29, 20, 22, 24, 23, 15, 6, 3, 3, 3, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
						0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 2, 5, 3, 6, 8, 15, 16, 10, 12, 16, 21,
						22, 15, 16, 18, 19, 19, 12, 10, 13, 14, 8, 5, 2, 1, 3, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
						0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 0, 1, 8, 6, 5, 4, 9, 9, 8, 8,
						7, 10, 7, 6, 4, 2, 3, 4, 2, 2, 1, 0, 2, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 3, 3, 4, 3, 2, 1, 3, 4, 4, 7,
						1, 2, 3, 3, 4, 0, 1, 1, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

		CannyEdgeDetector ced = new CannyEdgeDetector(lt, ht, gkRadius, gkWidth, normalized);
		double[][] output = ced.getEdges(image, colors);
		int largeCounter = 0;
		int smallCounter = 0;

		for (int row = 0; row < output.length; row++) {
			for (int col = 0; col < output[0].length; col++)
				// if(output[row][col] == 0xff000000){
				if (output[row][col] == 0) {
					largeCounter++;
				}
				// else if(output[row][col] == -1){
				else if (output[row][col] == 255) {
					smallCounter++;
				}
		}
		assertTrue(largeCounter == 3719);
		assertTrue(smallCounter == 377);
		assertTrue(largeCounter + smallCounter == image.length * image[0].length);
	}

	/*
	 * This is NOT a unit test, but it can show the output of the method
	 * Gradient.calculateGradientCart(), for any given image.
	 */
	/*
	 * @Test public void test1idx0() throws Exception {
	 * 
	 * double lt = 2.5; double ht = 7.5; double gkRadius = 2.0; int gkWidth = 16;
	 * boolean normalized = false; double[] colors = new double[] { 0.0, 255.0 };
	 * 
	 * // 1.Read an image to BufferedImage // ImageLoader il = new
	 * ImageLoader("sdo_171.jp2"); ImageLoader il = new ImageLoader("sdo_171.jpg");
	 * BufferedImage bImage = il.getBImage(); // 2.Convert bImage to a 2D array
	 * double[][] image = BufferedImage2Matrix.get2DArrayFromImage(bImage); // 3.
	 * Creade canny edge detector object CannyEdgeDetector ced = new
	 * CannyEdgeDetector(lt, ht, gkRadius, gkWidth, normalized); // 4. Apply edge
	 * detection double[][] output = ced.getEdges(image, colors); // 5. Write on the
	 * output BufferedImage outBImage =
	 * Matrix2BufferedImage.getBufferedImage(output); File outputfile = new
	 * File("Edge_sdo_171.jpg"); ImageIO.write(outBImage, "jpg", outputfile); }
	 */

}